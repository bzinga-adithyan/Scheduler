package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
)

func schedule(db *sql.DB) {

	startSpot := time.Now()
	durationSpot := time.Now()
	// updateSpot := time.Now()
	intervalSpot := time.Now()
	startHourly := time.Now()
	durationHourly := time.Now()
	// updateHourly := time.Now()
	intervalHourly := time.Now()
	startTwh := time.Now()
	durationTwh := time.Now()
	startTfh := time.Now()
	durationTfh := time.Now()
	// updateTwh := time.Now()
	// updateTfh := time.Now()
	// intervalTwh := time.Now()
	intervalTfh := time.Now()

	var count int
	var id int
	// var ref int
	// var category string
	// var prod_name string
	// var desc string
	// var mrp int
	// var base int

	var l int

	row := db.QueryRow("select count(*) from inputtable;")
	err := row.Scan(&l)
	if err != nil {
		log.Fatal(err)
	}

	rowLine := db.QueryRow("select * from logic1 where id=$1", 1)
	err1 := rowLine.Scan(&id, &count, &startSpot, &durationSpot, &intervalSpot)
	if err1 != nil {
		log.Fatal(err1)
	}

	rowLine2 := db.QueryRow("select * from logic1 where id=$1", 2)
	err2 := rowLine2.Scan(&id, &count, &startHourly, &durationHourly, &intervalHourly)
	if err2 != nil {
		log.Fatal(err2)
	}

	rowLine3 := db.QueryRow("select * from logic1 where id=$1", 3)
	err3 := rowLine3.Scan(&id, &count, &startTwh, &durationTwh, &intervalTfh)
	if err3 != nil {
		log.Fatal(err3)
	}

	rowLine4 := db.QueryRow("select * from logic1 where id=$1", 4)
	err4 := rowLine4.Scan(&id, &count, &startTfh, &durationTfh, &intervalTfh)
	if err4 != nil {
		log.Fatal(err4)
	}
	fmt.Printf("%d", startSpot.Month())

	// rows, err5 := db.Query("select * from inputtable")
	// if err5 != nil {
	// 	log.Fatal(err5)
	// }

	// for rows.Next() {
	// 	err:=rows.Scan(&ref,&category,&prod_name,&desc,&mrp,&base)

	// 	if err!=nil {
	// 		log.Fatal(err)
	// 	}

	// 	if mrp>=1 && mrp <= 999 {

	// 		if startSpot>= '00:00:00' {

	// 		}

	// 	}else if mrp>=1000 && mrp <=2999 {

	// 	}else if mrp >= 3000 && mrp <=4999 {

	// 	}else if mrp >= 5000 && mrp <=9999 {

	// 	}

	// }

	// for update != end {

	// 	var id int
	// 	var category string
	// 	var prod_name string
	// 	var description string
	// 	var mrp string

	// 	/*for i := 1; i <= count; i++ {

	// 		row := db.QueryRow(inputQuery, t+i)
	// 		err1 := row.Scan(&id, &category, &prod_name, &description, &mrp)
	// 		if err1 != nil {
	// 			log.Fatal(err1)
	// 		}
	// 		_, err2 := db.Exec(insertOutput, id, category, prod_name, description, mrp, start, update, auction)
	// 		if err2 != nil {
	// 			log.Fatal(err2)
	// 		}

	// 	}
	// 	t = t + 5

	// 	start = start.Add(15 * time.Minute) //interval*time.Minute --> reality
	// 	update = update.Add(15 * time.Minute)
	// 	auction++*/

	// }

}
func main() {
	err1 := godotenv.Load(".env")
	if err1 != nil {
		log.Fatal(err1)
	}
	db, err := sql.Open("postgres", os.Getenv("POSTGRES_URL"))
	if err != nil {
		log.Fatal("error connecting to the database: ", err)
	}

	fmt.Println("Database student opened and ready.")

	schedule(db)
}
